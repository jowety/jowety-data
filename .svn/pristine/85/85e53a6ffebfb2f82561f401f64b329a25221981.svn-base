package com.jowety.data.dao;

import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.TemporalType;

public class SqlDaoImpl implements SqlDao {

	/** The em. */
	@PersistenceContext
	protected EntityManager em;

	public void setEntityManager(EntityManager em) {
		this.em = em;
	}

	public EntityManager getEm() {
		return em;
	}

	@Override
	public <R> List<R> sqlTypedQuery(String SQL, Class<R> t, Object... params) {
		Query q = em.createNativeQuery(SQL, t);
		for(int i = 1; i <= params.length; i++) {
			Object o = params[i - 1];
			if(o instanceof Date)
				q.setParameter(i, (Date)o, TemporalType.TIMESTAMP);
			else if(o instanceof Calendar)
				q.setParameter(i, (Calendar)o, TemporalType.TIMESTAMP);
			else q.setParameter(i, o);
		}
		return q.getResultList();
	}

	@Override
	public long getNextSeqValue(String sequence) {
		BigDecimal val = (BigDecimal)sqlUntypedSingleResult("select " + sequence + ".nextval from DUAL");
		return val.longValue();
	}

	/* (non-Javadoc)
	 * @see mil.usmc.tso.soda.dao.GenericDao#jpqlUntypedSingleResult(java.lang.String)
	 */
	@Override
	public Object sqlUntypedSingleResult(String SQL, Object...params) {
		try {
			Query q = em.createNativeQuery(SQL);
			for(int i = 1; i <= params.length; i++) {
				Object o = params[i - 1];
				if(o instanceof Date)
					q.setParameter(i, (Date)o, TemporalType.TIMESTAMP);
				else if(o instanceof Calendar)
					q.setParameter(i, (Calendar)o, TemporalType.TIMESTAMP);
				else q.setParameter(i, o);
			}
			return q.getSingleResult();
		} catch (NoResultException e) {
			return null;
		}
	}

	@Override
	public <R> R sqlTypedSingleResult(String SQL, Class<R> r, Object...params) {
		try {
			Query q = em.createNativeQuery(SQL, r);
			for(int i = 1; i <= params.length; i++) {
				Object o = params[i - 1];
				if(o instanceof Date)
					q.setParameter(i, (Date)o, TemporalType.TIMESTAMP);
				else if(o instanceof Calendar)
					q.setParameter(i, (Calendar)o, TemporalType.TIMESTAMP);
				else q.setParameter(i, o);
			}
			return (R)q.getSingleResult();
		} catch (NoResultException e) {
			return null;
		}
	}


	/* (non-Javadoc)
	 * @see mil.usmc.tso.soda.dao.GenericDao#jpqlUnTypedQuery(java.lang.String, java.lang.Object)
	 */
	@Override
	public List<?> sqlUntypedQuery(String SQL, Object...params){
		Query q = em.createNativeQuery(SQL);
		for(int i = 1; i <= params.length; i++) {
			Object o = params[i - 1];
			if(o instanceof Date)
				q.setParameter(i, (Date)o, TemporalType.TIMESTAMP);
			else if(o instanceof Calendar)
				q.setParameter(i, (Calendar)o, TemporalType.TIMESTAMP);
			else q.setParameter(i, o);
		}
		return q.getResultList();
	}

	@Override
	public int sqlUpdate(String SQL, Object...params) {
		EntityManager em = getEm();
		Query q = em.createNativeQuery(SQL);
		for(int i = 1; i <= params.length; i++) {
			Object o = params[i - 1];
			if(o instanceof Date)
				q.setParameter(i, (Date)o, TemporalType.TIMESTAMP);
			else if(o instanceof Calendar)
				q.setParameter(i, (Calendar)o, TemporalType.TIMESTAMP);
			else q.setParameter(i, o);
		}
		return q.executeUpdate();
	}

}
